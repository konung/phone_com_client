=begin
#Phone.com API

#This is a Phone.com api Swagger definition

OpenAPI spec version: 1.0.0
Contact: apisupport@phone.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module SwaggerClient
  # The Full Call Log Object includes the properties in the Call Log Summary Object, along with the following:
  class CallLogFull
    # ID
    attr_accessor :id

    # Internal system id, may be null
    attr_accessor :uuid

    # Account extension
    attr_accessor :extension

    # Call made from this phone number
    attr_accessor :caller_id

    # Call made to this phone number
    attr_accessor :called_number

    # Call start time
    attr_accessor :start_time

    # Call log creation time. Same as call end time + time needed to create call log
    attr_accessor :created_at

    # Call direction: in or out
    attr_accessor :direction

    # Call type: call, fax, audiogram ...
    attr_accessor :type

    # Call duration in seconds
    attr_accessor :call_duration

    # Was call being monitored?
    attr_accessor :is_monitored

    # Internal system call reference number
    attr_accessor :call_number

    # Last action of call flow
    attr_accessor :final_action

    # URL of voicemail if available. User may download the audio via this URL. Empty string if voicemail does not exist
    attr_accessor :voicemail_url

    # URL of voicemail if available. User may listen to the audio online via this URL. Empty string if voicemail does not exist
    attr_accessor :voicemail_cp_url

    # Transcript of voicemail if enabled and available
    attr_accessor :voicemail_transcript

    # URL of call recording if available. User may download the audio via this URL. Empty string if call recording does not exist
    attr_accessor :call_recording_url

    # URL of call recording if available. User may listen to the audio online via this URL. Empty string if call recording does not exist
    attr_accessor :call_recording_cp_url

    # A list of call flows from beginning of call to end of call.
    attr_accessor :details

    # Internal system caller id / name
    attr_accessor :caller_cnam

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'uuid' => :'uuid',
        :'extension' => :'extension',
        :'caller_id' => :'caller_id',
        :'called_number' => :'called_number',
        :'start_time' => :'start_time',
        :'created_at' => :'created_at',
        :'direction' => :'direction',
        :'type' => :'type',
        :'call_duration' => :'call_duration',
        :'is_monitored' => :'is_monitored',
        :'call_number' => :'call_number',
        :'final_action' => :'final_action',
        :'voicemail_url' => :'voicemail_url',
        :'voicemail_cp_url' => :'voicemail_cp_url',
        :'voicemail_transcript' => :'voicemail_transcript',
        :'call_recording_url' => :'call_recording_url',
        :'call_recording_cp_url' => :'call_recording_cp_url',
        :'details' => :'details',
        :'caller_cnam' => :'caller_cnam'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'uuid' => :'String',
        :'extension' => :'ExtensionSummary',
        :'caller_id' => :'String',
        :'called_number' => :'String',
        :'start_time' => :'String',
        :'created_at' => :'String',
        :'direction' => :'String',
        :'type' => :'String',
        :'call_duration' => :'Integer',
        :'is_monitored' => :'String',
        :'call_number' => :'String',
        :'final_action' => :'String',
        :'voicemail_url' => :'String',
        :'voicemail_cp_url' => :'String',
        :'voicemail_transcript' => :'String',
        :'call_recording_url' => :'String',
        :'call_recording_cp_url' => :'String',
        :'details' => :'Array<CallDetails>',
        :'caller_cnam' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.has_key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.has_key?(:'caller_id')
        self.caller_id = attributes[:'caller_id']
      end

      if attributes.has_key?(:'called_number')
        self.called_number = attributes[:'called_number']
      end

      if attributes.has_key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'call_duration')
        self.call_duration = attributes[:'call_duration']
      end

      if attributes.has_key?(:'is_monitored')
        self.is_monitored = attributes[:'is_monitored']
      end

      if attributes.has_key?(:'call_number')
        self.call_number = attributes[:'call_number']
      end

      if attributes.has_key?(:'final_action')
        self.final_action = attributes[:'final_action']
      end

      if attributes.has_key?(:'voicemail_url')
        self.voicemail_url = attributes[:'voicemail_url']
      end

      if attributes.has_key?(:'voicemail_cp_url')
        self.voicemail_cp_url = attributes[:'voicemail_cp_url']
      end

      if attributes.has_key?(:'voicemail_transcript')
        self.voicemail_transcript = attributes[:'voicemail_transcript']
      end

      if attributes.has_key?(:'call_recording_url')
        self.call_recording_url = attributes[:'call_recording_url']
      end

      if attributes.has_key?(:'call_recording_cp_url')
        self.call_recording_cp_url = attributes[:'call_recording_cp_url']
      end

      if attributes.has_key?(:'details')
        if (value = attributes[:'details']).is_a?(Array)
          self.details = value
        end
      end

      if attributes.has_key?(:'caller_cnam')
        self.caller_cnam = attributes[:'caller_cnam']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          uuid == o.uuid &&
          extension == o.extension &&
          caller_id == o.caller_id &&
          called_number == o.called_number &&
          start_time == o.start_time &&
          created_at == o.created_at &&
          direction == o.direction &&
          type == o.type &&
          call_duration == o.call_duration &&
          is_monitored == o.is_monitored &&
          call_number == o.call_number &&
          final_action == o.final_action &&
          voicemail_url == o.voicemail_url &&
          voicemail_cp_url == o.voicemail_cp_url &&
          voicemail_transcript == o.voicemail_transcript &&
          call_recording_url == o.call_recording_url &&
          call_recording_cp_url == o.call_recording_cp_url &&
          details == o.details &&
          caller_cnam == o.caller_cnam
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, uuid, extension, caller_id, called_number, start_time, created_at, direction, type, call_duration, is_monitored, call_number, final_action, voicemail_url, voicemail_cp_url, voicemail_transcript, call_recording_url, call_recording_cp_url, details, caller_cnam].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
