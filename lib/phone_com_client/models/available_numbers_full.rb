=begin
#Phone.com API

#This is a Phone.com api PhoneCom definition

OpenAPI spec version: 1.0.0
Contact: apisupport@phone.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
PhoneCom Codegen version: 2.4.4

=end

require 'date'

module PhoneComClient
  # The Full Available Phone Number Object includes the properties in the Summary Object, along with the following:
  class AvailableNumbersFull
    # Phone number, in E.164 format
    attr_accessor :phone_number

    # Human-readable formatted version of the phone number
    attr_accessor :formatted

    # The one-time initial price for this number, in USD. Some numbers show REQUEST_QUOTE here. Please contact our sales department if you are interested in these numbers.
    attr_accessor :price

    # Whether the number is toll-free
    attr_accessor :is_toll_free

    # The international dialing prefix for this number. For US and Canadian numbers, for example, this will be \"1\".
    attr_accessor :country_code

    # Area code (a.k.a. NPA). Included for North American numbers only.
    attr_accessor :npa

    # Second 3 digits (a.k.a. NXX). Included for North American numbers only.
    attr_accessor :nxx

    # Last 4 digits (a.k.a. XXXX). Included for North American numbers only.
    attr_accessor :xxxx

    # City with which this number is associated, if known. Otherwise NULL.
    attr_accessor :city

    # State or Province with which this number is associated, if known. Postal Code. Otherwise NULL.
    attr_accessor :province

    # Country with which this number is associated, if known. Otherwise NULL.
    attr_accessor :country

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'phone_number' => :'phone_number',
        :'formatted' => :'formatted',
        :'price' => :'price',
        :'is_toll_free' => :'is_toll_free',
        :'country_code' => :'country_code',
        :'npa' => :'npa',
        :'nxx' => :'nxx',
        :'xxxx' => :'xxxx',
        :'city' => :'city',
        :'province' => :'province',
        :'country' => :'country'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'phone_number' => :'String',
        :'formatted' => :'String',
        :'price' => :'Integer',
        :'is_toll_free' => :'BOOLEAN',
        :'country_code' => :'String',
        :'npa' => :'String',
        :'nxx' => :'String',
        :'xxxx' => :'String',
        :'city' => :'String',
        :'province' => :'String',
        :'country' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.has_key?(:'formatted')
        self.formatted = attributes[:'formatted']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'is_toll_free')
        self.is_toll_free = attributes[:'is_toll_free']
      end

      if attributes.has_key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.has_key?(:'npa')
        self.npa = attributes[:'npa']
      end

      if attributes.has_key?(:'nxx')
        self.nxx = attributes[:'nxx']
      end

      if attributes.has_key?(:'xxxx')
        self.xxxx = attributes[:'xxxx']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'province')
        self.province = attributes[:'province']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          phone_number == o.phone_number &&
          formatted == o.formatted &&
          price == o.price &&
          is_toll_free == o.is_toll_free &&
          country_code == o.country_code &&
          npa == o.npa &&
          nxx == o.nxx &&
          xxxx == o.xxxx &&
          city == o.city &&
          province == o.province &&
          country == o.country
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [phone_number, formatted, price, is_toll_free, country_code, npa, nxx, xxxx, city, province, country].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = PhoneComClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
