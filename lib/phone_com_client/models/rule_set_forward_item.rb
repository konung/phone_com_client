=begin
#Phone.com API

#This is a Phone.com api PhoneCom definition

OpenAPI spec version: 1.0.0
Contact: apisupport@phone.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
PhoneCom Codegen version: 2.4.4

=end

require 'date'

module PhoneComClient
  # Array of Forward Item Objects. See below for details. Required.
  class RuleSetForwardItem
    # Required. Must equal phone_number or extension.
    attr_accessor :type

    # Required if type = \"extension\". Extension that callers should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.
    attr_accessor :extension

    # Required if type = \"phone_number\". Phone number that callers should be directed to. Must be a string in E.164 format.
    attr_accessor :number

    # Boolean. Optional. Default is FALSE. Use this to activate call screening. If TRUE, the timeout on the parent action should be at least 30 seconds.
    attr_accessor :screening

    # Optional. Must equal calling_number or called_number. Defines which phone number should be used for Caller ID. Default is calling_number.
    attr_accessor :caller_id

    # Optional string. If screening = TRUE, this value will be passed into our Text-To-Speech engine and used to inform the caller of who they have reached.
    attr_accessor :voice_tag

    # Optional. Must equal one of: DEFAULT, STYLE_2, STYLE_3, STYLE_4, STYLE_5, STYLE_6, STYLE_7, STYLE_8, or STYLE_9. Identifies the style of ring tone you will hear when an incoming call is waiting.
    attr_accessor :distinctive_ring

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'extension' => :'extension',
        :'number' => :'number',
        :'screening' => :'screening',
        :'caller_id' => :'caller_id',
        :'voice_tag' => :'voice_tag',
        :'distinctive_ring' => :'distinctive_ring'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'extension' => :'ExtensionSummary',
        :'number' => :'String',
        :'screening' => :'BOOLEAN',
        :'caller_id' => :'String',
        :'voice_tag' => :'String',
        :'distinctive_ring' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'screening')
        self.screening = attributes[:'screening']
      else
        self.screening = false
      end

      if attributes.has_key?(:'caller_id')
        self.caller_id = attributes[:'caller_id']
      else
        self.caller_id = 'calling_number'
      end

      if attributes.has_key?(:'voice_tag')
        self.voice_tag = attributes[:'voice_tag']
      end

      if attributes.has_key?(:'distinctive_ring')
        self.distinctive_ring = attributes[:'distinctive_ring']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@type.nil? && @type !~ Regexp.new(/phone_number|extension/)
        invalid_properties.push('invalid value for "type", must conform to the pattern /phone_number|extension/.')
      end

      if !@caller_id.nil? && @caller_id !~ Regexp.new(/calling_number|called_number/)
        invalid_properties.push('invalid value for "caller_id", must conform to the pattern /calling_number|called_number/.')
      end

      if !@distinctive_ring.nil? && @distinctive_ring !~ Regexp.new(/DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/)
        invalid_properties.push('invalid value for "distinctive_ring", must conform to the pattern /DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@type.nil? && @type !~ Regexp.new(/phone_number|extension/)
      return false if !@caller_id.nil? && @caller_id !~ Regexp.new(/calling_number|called_number/)
      return false if !@distinctive_ring.nil? && @distinctive_ring !~ Regexp.new(/DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type !~ Regexp.new(/phone_number|extension/)
        fail ArgumentError, 'invalid value for "type", must conform to the pattern /phone_number|extension/.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] caller_id Value to be assigned
    def caller_id=(caller_id)
      if !caller_id.nil? && caller_id !~ Regexp.new(/calling_number|called_number/)
        fail ArgumentError, 'invalid value for "caller_id", must conform to the pattern /calling_number|called_number/.'
      end

      @caller_id = caller_id
    end

    # Custom attribute writer method with validation
    # @param [Object] distinctive_ring Value to be assigned
    def distinctive_ring=(distinctive_ring)
      if !distinctive_ring.nil? && distinctive_ring !~ Regexp.new(/DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/)
        fail ArgumentError, 'invalid value for "distinctive_ring", must conform to the pattern /DEFAULT|STYLE_2|STYLE_3|STYLE_4|STYLE_5|STYLE_6|STYLE_7|STYLE_8|STYLE_9/.'
      end

      @distinctive_ring = distinctive_ring
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          extension == o.extension &&
          number == o.number &&
          screening == o.screening &&
          caller_id == o.caller_id &&
          voice_tag == o.voice_tag &&
          distinctive_ring == o.distinctive_ring
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, extension, number, screening, caller_id, voice_tag, distinctive_ring].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = PhoneComClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
